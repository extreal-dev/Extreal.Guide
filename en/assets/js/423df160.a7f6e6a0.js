"use strict";(self.webpackChunkextreal=self.webpackChunkextreal||[]).push([[6377],{8258:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(9668),i=(a(6540),a(5680)),l=a(7443);const r={sidebar_position:3},o="Chat using WebRTC",p={unversionedId:"integration/chat.webrtc",id:"integration/chat.webrtc",title:"Chat using WebRTC",description:"What for?",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/integration/chat.webrtc.md",sourceDirName:"integration",slug:"/integration/chat.webrtc",permalink:"/Extreal.Guide/en/next/integration/chat.webrtc",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Chat using Vivox",permalink:"/Extreal.Guide/en/next/integration/chat.vivox"},next:{title:"Common for Web",permalink:"/Extreal.Guide/en/next/integration/web.common"}},c={},s=[{value:"What for?",id:"what-for",level:2},{value:"Specification",id:"specification",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Unity",id:"unity",level:3},{value:"JavaScript",id:"javascript",level:3},{value:"Installation",id:"installation",level:2},{value:"Package",id:"package",level:3},{value:"Unity",id:"unity-1",level:4},{value:"npm",id:"npm",level:4},{value:"Dependencies",id:"dependencies",level:3},{value:"Unity",id:"unity-2",level:4},{value:"npm",id:"npm-1",level:4},{value:"Settings",id:"settings",level:3},{value:"Usage",id:"usage",level:2},{value:"Perform P2P text chat",id:"perform-p2p-text-chat",level:3},{value:"Perform P2P voice chat",id:"voice-chat-via-p2p",level:3},{value:"Add a processing triggered by VoiceChat Client state",id:"voice-chat-p2p-event",level:3}],g={toc:s},h="wrapper";function u(e){let{components:t,...a}=e;return(0,i.yg)(h,(0,n.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"chat-using-webrtc"},"Chat using WebRTC"),(0,i.yg)("h2",{id:"what-for"},"What for?"),(0,i.yg)("p",null,"P2P(Peer to Peer) is a means of communication with the lowest possible cost."),(0,i.yg)("p",null,"This module provides P2P text/voice chat for Native(C#) and WebGL(JavaScript)."),(0,i.yg)("h2",{id:"specification"},"Specification"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"P2P text chat is available."),(0,i.yg)("li",{parentName:"ul"},"P2P voice chat is available.")),(0,i.yg)("h2",{id:"architecture"},"Architecture"),(0,i.yg)("h3",{id:"unity"},"Unity"),(0,i.yg)(l.K,{chart:"classDiagram\n\n    TextChatClientProvider ..> TextChatClient\n    TextChatClient <|-- NativeTextChatClient\n    TextChatClient <|-- WebGLTextChatClient\n    VoiceChatClientProvider ..> VoiceChatClient\n    VoiceChatClientProvider ..> VoiceChatConfig\n    VoiceChatClient <|-- NativeVoiceChatClient\n    VoiceChatClient <|-- WebGLVoiceChatClient\n\n    class TextChatClientProvider {\n        +Provide(peerClient)$ TextChatClient\n    }\n    \n    class TextChatClient {\n        +OnMessageReceived IObservable\n        +Send(message) void\n        +Clear() void\n    }\n    \n    class NativeTextChatClient {\n    }\n    \n    class WebGLTextChatClient {\n    }\n\n    class VoiceChatClientProvider {\n        +Provide(peerClient, config)$ VoiceChatClient\n    }\n\n    class VoiceChatConfig {\n    }\n\n    class VoiceChatClient {\n        +OnMuted IObservable\n        +OnAudioLevelChanged IObservable\n        +HasMicrophone() bool\n        +ToggleMute() void\n        +SetInVolume(volume) void\n        +SetOutVolume(volume) void\n        +Clear() void\n    }\n    \n    class NativeVoiceChatClient {\n    }\n    \n    class WebGLVoiceChatClient {\n    }",mdxType:"Mermaid"}),(0,i.yg)("h3",{id:"javascript"},"JavaScript"),(0,i.yg)(l.K,{chart:"classDiagram\n\n    WebGLTextChatClient ..> WebGLHelper\n    WebGLHelper ..> TextChatClient\n    TextChatAdapter ..> TextChatClient\n    WebGLVoiceChatClient ..> WebGLHelper\n    WebGLHelper ..> VoiceChatClient\n    VoiceChatAdapter ..> VoiceChatClient\n    \n    class WebGLHelper {\n        <<C#>>\n    }\n\n    class WebGLTextChatClient {\n        <<C#>>\n    }\n\n    class WebGLVoiceChatClient {\n        <<C#>>\n    }\n\n    class TextChatAdapter {\n        <<TypeScript>>\n    }\n    \n    class TextChatClient {\n        <<TypeScript>>\n    }\n\n    class VoiceChatAdapter {\n        <<TypeScript>>\n    }\n    \n    class VoiceChatClient {\n        <<TypeScript>>\n    }",mdxType:"Mermaid"}),(0,i.yg)("h2",{id:"installation"},"Installation"),(0,i.yg)("h3",{id:"package"},"Package"),(0,i.yg)("h4",{id:"unity-1"},"Unity"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"https://github.com/extreal-dev/Extreal.Integration.Chat.WebRTC.git\n")),(0,i.yg)("h4",{id:"npm"},"npm"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"@extreal-dev/extreal.integration.chat.webrtc\n")),(0,i.yg)("h3",{id:"dependencies"},"Dependencies"),(0,i.yg)("p",null,"This module uses the following packages."),(0,i.yg)("h4",{id:"unity-2"},"Unity"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/core/logging"},"Extreal.Core.Logging")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/core/common"},"Extreal.Core.Common")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/integration/web.common"},"Extreal.Integration.Web.Common")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/integration/p2p.webrtc"},"Extreal.Integration.P2P.WebRTC")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.webrtc@3.0/manual/index.html"},"WebRTC")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/Cysharp/UniTask"},"UniTask")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/neuecc/UniRx"},"UniRx"))),(0,i.yg)("h4",{id:"npm-1"},"npm"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@extreal-dev/extreal.integration.web.common"},"@extreal-dev/extreal.integration.web.common")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@extreal-dev/extreal.integration.p2p.webrtc"},"@extreal-dev/extreal.integration.p2p.webrtc"))),(0,i.yg)("p",null,"Please refer to ",(0,i.yg)("a",{parentName:"p",href:"../../category/release"},"Release")," for the correspondence between module version and each package version."),(0,i.yg)("h3",{id:"settings"},"Settings"),(0,i.yg)("p",null,"This module uses ",(0,i.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/p2p.webrtc"},"P2P.WebRTC")," to realize P2P.\n",(0,i.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/p2p.webrtc#settings"},"WebRTC Settings")," is required.\nPlease add the following initialization after setting up P2P.WebRTC."),(0,i.yg)("p",null,"Create a Client with each Provider."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public class ClientControlScope : LifetimeScope\n{\n    protected override void Configure(IContainerBuilder builder)\n    {\n        var peerConfig = new PeerConfig("http://127.0.0.1:3010");\n        var peerClient = PeerClientProvider.Provide(peerConfig);\n        builder.RegisterComponent(peerClient);\n\n        var textChatClient = TextChatClientProvider.Provide(peerClient);\n        builder.RegisterComponent(textChatClient);\n\n        var voiceChatClient = VoiceChatClientProvider.Provide(peerClient);\n        builder.RegisterComponent(voiceChatClient);\n\n        builder.RegisterEntryPoint<ClientControlPresenter>();\n    }\n}\n')),(0,i.yg)("p",null,"If used with WebGL, further JavaScript initialization is required.\nCreate each Adapter and call the adapt function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'import { PeerAdapter } from "@extreal-dev/extreal.integration.p2p.webrtc";\nimport { TextChatAdapter, VoiceChatAdapter } from "@extreal-dev/extreal.integration.chat.webrtc";\n\nconst peerAdapter = new PeerAdapter();\npeerAdapter.adapt();\n\nconst textChatAdapter = new TextChatAdapter();\ntextChatAdapter.adapt(peerAdapter.getPeerClient);\n\nconst voiceChatAdapter = new VoiceChatAdapter();\nvoiceChatAdapter.adapt(peerAdapter.getPeerClient);\n')),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("h3",{id:"perform-p2p-text-chat"},"Perform P2P text chat"),(0,i.yg)("p",null,"Text chat uses ",(0,i.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/p2p.webrtc"},"P2P.WebRTC")," to realize P2P.\nUse ",(0,i.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/p2p.webrtc#p2p-webrtc-host-client"},"P2P.WebRTC's API")," to establish P2P connections."),(0,i.yg)("p",null,"Text chat features are provided by TextChatClient."),(0,i.yg)("p",null,"Use the Send method to send messages."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"textChatClient.Send(message);\n")),(0,i.yg)("p",null,"The OnMessageReceived event is used to receive a message.\nA string message is passed as a parameter."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"textChatClient.OnMessageReceived\n    .Subscribe(message =>\n    {\n        // do something\n    })\n    .AddTo(disposables);\n")),(0,i.yg)("p",null,"To end the text chat, use the Clear method."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"textChatClient.Clear();\n")),(0,i.yg)("h3",{id:"voice-chat-via-p2p"},"Perform P2P voice chat"),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"If the microphone is not available, only the speaker is enabled.")),(0,i.yg)("p",null,"Voice chat uses ",(0,i.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/p2p.webrtc"},"P2P.WebRTC")," to realize P2P.\nPlease use ",(0,i.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/p2p.webrtc#p2p-webrtc-host-client"},"P2P.WebRTC's API")," to establish P2P connections."),(0,i.yg)("p",null,"Voice Chat features are provided by VoiceChatClient."),(0,i.yg)("p",null,"Use the ToggleMute method to switch mute."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"voiceChatClient.ToggleMute();\n")),(0,i.yg)("p",null,"The value(bool) after switching to mute is received in the OnMuted event."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"voiceChatClient.OnMuted\n    .Subscribe(muted =>\n    {\n        // do something\n    })\n    .AddTo(disposables);\n")),(0,i.yg)("p",null,"If you want to specify the default value for mute, specify it in VoiceChatConfig."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"var voiceChatConfig = new VoiceChatConfig(initialMute: false);\nvar voiceChatClient = VoiceChatClientProvider.Provide(peerClient, voiceChatConfig);\n")),(0,i.yg)("p",null,"Use the SetInVolume method to adjust the input volume."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"voiceChatClient.SetInVolume(volume);\n")),(0,i.yg)("p",null,"If you want to specify the default value for the input volume, specify it in VoiceChatConfig."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"var voiceChatConfig = new VoiceChatConfig(initialInVolume: 0.8f);\nvar voiceChatClient = VoiceChatClientProvider.Provide(peerClient, voiceChatConfig);\n")),(0,i.yg)("p",null,"Use the SetOutVolume method to adjust the output volume."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"voiceChatClient.SetOutVolume(volume);\n")),(0,i.yg)("p",null,"If you want to specify the default value for the output volume, specify it in VoiceChatConfig."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"var voiceChatConfig = new VoiceChatConfig(initialOutVolume: 0.8f);\nvar voiceChatClient = VoiceChatClientProvider.Provide(peerClient, voiceChatConfig);\n")),(0,i.yg)("h3",{id:"voice-chat-p2p-event"},"Add a processing triggered by VoiceChat Client state"),(0,i.yg)("p",null,"VoiceChatClient has the following event notifications."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"OnAudioLevelChanged",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Timing: When there is a change in audio level at each specified frequency"),(0,i.yg)("li",{parentName:"ul"},"Type: IObservable"),(0,i.yg)("li",{parentName:"ul"},"Parameters: ID and audio level pairs")))),(0,i.yg)("p",null,"If you want to specify how often the speech volume is acquired, specify it in VoiceChatConfig."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"var voiceChatConfig = new VoiceChatConfig(InitialAudioLevelCheckIntervalSeconds: 0.5f);\nvar voiceChatClient = VoiceChatClientProvider.Provide(peerClient, voiceChatConfig);\n")))}u.isMDXComponent=!0}}]);