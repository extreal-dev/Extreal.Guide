"use strict";(self.webpackChunkextreal=self.webpackChunkextreal||[]).push([[62],{4490:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=i(9668),a=(i(6540),i(5680)),r=i(7443);const o={sidebar_position:10},l="SFU using OME",s={unversionedId:"integration/sfu.ome",id:"integration/sfu.ome",title:"SFU using OME",description:"What for?",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/integration/sfu.ome.md",sourceDirName:"integration",slug:"/integration/sfu.ome",permalink:"/Extreal.Guide/en/next/integration/sfu.ome",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"P2P using WebRTC",permalink:"/Extreal.Guide/en/next/integration/p2p.webrtc"},next:{title:"Sample Application",permalink:"/Extreal.Guide/en/next/category/sample-application"}},c={},d=[{value:"What for?",id:"what-for",level:2},{value:"Specification",id:"specification",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Unity",id:"unity",level:3},{value:"JavaScript",id:"javascript",level:3},{value:"Installation",id:"installation",level:2},{value:"Package",id:"package",level:3},{value:"Unity",id:"unity-1",level:4},{value:"npm",id:"npm",level:4},{value:"Dependencies",id:"dependencies",level:3},{value:"Unity",id:"unity-2",level:4},{value:"npm",id:"npm-1",level:4},{value:"Settings",id:"settings",level:3},{value:"OME server",id:"ome-server",level:4},{value:"Signaling server",id:"signaling-server",level:4},{value:"Application",id:"application",level:4},{value:"Usage",id:"usage",level:2},{value:"Establish SFU connection",id:"sfu-ome-establish-connection",level:3},{value:"Add processing triggered by SFU status",id:"add-processing-triggered-by-sfu-status",level:3},{value:"Add application-specific processing to Native (C#) SFU",id:"add-application-specific-processing-to-native-c-sfu",level:3},{value:"Add application-specific processing to WebGL (JavaScript) SFU",id:"add-application-specific-processing-to-webgl-javascript-sfu",level:3}],g={toc:d},u="wrapper";function p(e){let{components:n,...i}=e;return(0,a.yg)(u,(0,t.A)({},g,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"sfu-using-ome"},"SFU using OME"),(0,a.yg)("h2",{id:"what-for"},"What for?"),(0,a.yg)("p",null,"SFU (Selective Forwarding Unit) is a means of large-scale communication in virtual spaces, etc., with the lowest possible cost."),(0,a.yg)("p",null,"Although it is relatively easy to implement SFU by using ",(0,a.yg)("a",{parentName:"p",href:"https://airensoft.gitbook.io/ovenmediaengine/"},"OME (OvenMediaEngine)"),", the SFU connection establishment is a similar processing, so it is provided as a common feature.\nBy using this common feature, an application-specific SFU can be realized by simply adding media stream processing."),(0,a.yg)("p",null,"This module provides base SFU features for Native (C#) and WebGL (JavaScript)."),(0,a.yg)("h2",{id:"specification"},"Specification"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"SFU connections can be established."),(0,a.yg)("li",{parentName:"ul"},"You can add processing triggered by SFU status."),(0,a.yg)("li",{parentName:"ul"},"You can add application-specific processing to Native (C#) SFU."),(0,a.yg)("li",{parentName:"ul"},"You can add application-specific processing to WebGL (JavaScript) SFU.")),(0,a.yg)("h2",{id:"architecture"},"Architecture"),(0,a.yg)("h3",{id:"unity"},"Unity"),(0,a.yg)(r.K,{chart:"classDiagram\n\n    OmeClientProvider ..> OmeClient\n    OmeClient <|-- NativeOmeClient\n    OmeClient <|-- WebGLOmeClient\n    OmeClient ..> OmeConfig\n\n    class OmeClientProvider {\n        +Provide(omeConfig)$ OmeClient\n    }\n    \n    class OmeClient {\n        <<abstract>>\n        +OnJoined IObservable\n        +OnLeft IObservable\n        +OnUnexpectedLeft IObservable\n        +OnUserJoined IObservable\n        +OnUserLeft IObservable\n        +ListGroupsAsync() List\n        +JoinAsync(groupName) void\n        +LeaveAsync() void\n    }\n    \n    class OmeConfig {\n        +ServerUrl string\n        +IceServerConfigs List\n    }\n\n    class NativeOmeClient {\n    }\n    \n    class WebGLOmeClient {\n    }",mdxType:"Mermaid"}),(0,a.yg)("h3",{id:"javascript"},"JavaScript"),(0,a.yg)(r.K,{chart:"classDiagram\n\n    WebGLOmeClient ..> WebGLHelper  \n    OmeClient <.. WebGLHelper  \n    OmeAdapter ..> OmeClient\n\n    class WebGLOmeClient {\n        <<C#>>\n    }\n    \n    class WebGLHelper {\n        <<C#>>\n    }\n\n    class OmeAdapter {\n        <<TypeScript>>\n        +adapt() void\n    }\n    \n    class OmeClient {\n        +localClientId string\n        +releaseManagedResources() void\n        +addPublishPcCreateHook(hook) void\n        +addSubscribePcCreateHook(hook) void\n        +addPublishPcCloseHook(hook) void\n        +addSubscribePcCloseHook(hook) void\n        +listGroups() void\n        +join(groupName) void\n        +leave() void\n    }",mdxType:"Mermaid"}),(0,a.yg)("p",null,"In SFU with OME, the application, signaling server, and OME server cooperate to establish SFU connections.\nThis module provides features to establish a SFU connection, assuming the following processing flow.\nThe publish connection and subscribe connection are connected through separate P2P communication using WebRTC, respectively."),(0,a.yg)(r.K,{chart:'sequenceDiagram\n    actor Client\n    participant Signaling\n    participant OME\n    actor ClientsAlreadyJoined\n\n    Client->>Signaling: list groups\n    Signaling--\x3e>Client: group list or empty list\n    Client->>Signaling: message "publish"\n    Signaling->>OME: message "request_offer"\n    OME->>Signaling: message with offer\n    Signaling->>Client: message "publish offer" with offer\n    Client->>Signaling: message "answer" with answer\n    Signaling->>OME: message "answer" with answer\n    note over Client, OME: Established publish connection \n    Client->>Signaling: message "join"\n    Signaling->>Client: message "join" for each client who has already joined\n    Client->>Signaling: message "subscribe" for each client who has already joined\n    Signaling->>OME: change only "publish offer" to "subscribe offer" and followed by "request_offer" to "answer" but omitted\n    note over Client, OME: Established subscribe connections for all clients who has already joined\n    Signaling->>ClientsAlreadyJoined: message "join" for Client\n    ClientsAlreadyJoined->>Signaling: message "subscribe" for Client\n    Signaling->>OME: change only "publish offer" to "subscribe offer" and followed by "request_offer" to "answer" but omitted\n    note over ClientsAlreadyJoined, OME: Established subscribe connection for Client',mdxType:"Mermaid"}),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("h3",{id:"package"},"Package"),(0,a.yg)("h4",{id:"unity-1"},"Unity"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-text"},"https://github.com/extreal-dev/Extreal.Integration.SFU.OME.git\n")),(0,a.yg)("h4",{id:"npm"},"npm"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-text"},"@extreal-dev/extreal.integration.sfu.ome\n")),(0,a.yg)("h3",{id:"dependencies"},"Dependencies"),(0,a.yg)("p",null,"This module uses the following packages."),(0,a.yg)("h4",{id:"unity-2"},"Unity"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/core/logging"},"Extreal.Core.Logging")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/core/common"},"Extreal.Core.Common")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/Extreal.Guide/en/next/integration/web.common"},"Extreal.Integration.Web.Common")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://docs.unity3d.com/Packages/com.unity.webrtc@3.0/manual/index.html"},"WebRTC")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://github.com/Cysharp/UniTask"},"UniTask")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://github.com/neuecc/UniRx"},"UniRx")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://github.com/endel/NativeWebSocket"},"NativeWebSocket"))),(0,a.yg)("h4",{id:"npm-1"},"npm"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@extreal-dev/extreal.integration.web.common"},"@extreal-dev/extreal.integration.web.common"))),(0,a.yg)("h3",{id:"settings"},"Settings"),(0,a.yg)("h4",{id:"ome-server"},"OME server"),(0,a.yg)("p",null,"OME server is provided by ",(0,a.yg)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose"),".\nPlease refer to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/extreal-dev/Extreal.Integration.SFU.OME/tree/main/OMEServer~"},"README")," to prepare the OME server."),(0,a.yg)("h4",{id:"signaling-server"},"Signaling server"),(0,a.yg)("p",null,"Signaling server is provided by ",(0,a.yg)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose"),".\nPlease refer to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/extreal-dev/Extreal.Integration.SFU.OME/tree/main/SignalingServer~"},"README")," to prepare the signaling server."),(0,a.yg)("h4",{id:"application"},"Application"),(0,a.yg)("p",null,"Create OmeClient using OmeClientProvider.\nSpecify the URL of the signaling server when creating OmeClient."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'public class ClientControlScope : LifetimeScope\n{\n    protected override void Configure(IContainerBuilder builder)\n    {\n        var omeConfig = new OmeConfig("http://localhost:3040");\n        var omeClient = OmeClientProvider.Provide(omeConfig);\n        builder.RegisterComponent(omeClient);\n    }\n}\n')),(0,a.yg)("p",null,"If you want to use it with WebGL, initialize it further with JavaScript.\nCreate OmeAdapter and call adapt function."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { OmeAdapter } from "@extreal-dev/extreal.integration.sfu.ome";\n\nconst omeAdapter = new OmeAdapter();\nomeAdapter.adapt();\n')),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("h3",{id:"sfu-ome-establish-connection"},"Establish SFU connection"),(0,a.yg)("p",null,"This module provides the feature to establish SFU connections.\nThese features are provided by OmeClient."),(0,a.yg)("p",null,"First, join the group by specifying a name.\nIf a group with the same name does not yet exist, a new group is created, and if it exists, the user joins that group."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'await omeClient.JoinAsync("group name");\n')),(0,a.yg)("p",null,"Use the LeaveAsync method to leave the group."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},"await omeClient.LeaveAsync();\n")),(0,a.yg)("p",null,"Use the ListGroupsAsync method to obtain a list of currently existing groups."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},"var groups = await omeClient.ListGroupsAsync();\n")),(0,a.yg)("h3",{id:"add-processing-triggered-by-sfu-status"},"Add processing triggered by SFU status"),(0,a.yg)("p",null,"OmeClient has the following event notifications"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"OnJoined",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Timing: Immediately after joining a group"),(0,a.yg)("li",{parentName:"ul"},"Type: IObservable"),(0,a.yg)("li",{parentName:"ul"},"Parameters: User's own client ID"))),(0,a.yg)("li",{parentName:"ul"},"OnLeft",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Timing: Immediately after leaving the group"),(0,a.yg)("li",{parentName:"ul"},"Type: IObservable"),(0,a.yg)("li",{parentName:"ul"},"Parameters: None"))),(0,a.yg)("li",{parentName:"ul"},"OnUnexpectedLeft",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Timing: Immediately after the connection with the signaling server is disconnected"),(0,a.yg)("li",{parentName:"ul"},"Type: IObservable"),(0,a.yg)("li",{parentName:"ul"},"Parameters: Reason for disconnection"))),(0,a.yg)("li",{parentName:"ul"},"OnUserJoined",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Timing: Immediately after connecting with another user",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Connecting users receive events from each other. Therefore, a newly connecting user will receive events for all users already connected."))),(0,a.yg)("li",{parentName:"ul"},"Type: IObservable"),(0,a.yg)("li",{parentName:"ul"},"Parameters: Client ID of the connected user"))),(0,a.yg)("li",{parentName:"ul"},"OnUserLeft",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Timing: Immediately after disconnecting from another user"),(0,a.yg)("li",{parentName:"ul"},"Type: IObservable"),(0,a.yg)("li",{parentName:"ul"},"Parameters: Client ID of the disconnected user")))),(0,a.yg)("h3",{id:"add-application-specific-processing-to-native-c-sfu"},"Add application-specific processing to Native (C#) SFU"),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Processing continues even if errors occur during Create/Close of PeerConnection.")),(0,a.yg)("p",null,"OmeClient has hooks that can add processing at the start and end of publish and subscribe connections."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},"omeClient.AddPublishPcCreateHook((id, rtcPeerConnection) =>\n{\n    // do something\n});\n\nomeClient.AddSubscribePcCreateHook((id, rtcPeerConnection) =>\n{\n    // do something\n});\n\nomeClient.AddPublishPcCloseHook((id) =>\n{\n    // do something\n});\n\nomeClient.AddSubscribePcCloseHook((id) =>\n{\n    // do something\n});\n")),(0,a.yg)("p",null,"These hooks are used to add application-specific features to SFU by manipulating media streams.\nAn example implementation for adding an audio stream is as follows."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nusing System.Linq;\nusing Extreal.Core.Logging;\nusing Unity.WebRTC;\nusing UnityEngine;\n\nnamespace Extreal.Integration.SFU.OME.MVS.ClientControl\n{\n    public class NativeAudioStreamClient : AudioStreamClient\n    {\n        private static readonly ELogger Logger = LoggingManager.GetLogger(nameof(NativeAudioStreamClient));\n\n        private (AudioSource inAudio, AudioStreamTrack inTrack, MediaStream inStream) inResource;\n        private readonly Dictionary<string, (AudioSource outAudio, MediaStream outStream)> outResources = new Dictionary<string, (AudioSource, MediaStream)>();\n\n        private readonly Transform audioSourceContainer;\n\n        public NativeAudioStreamClient(NativeOmeClient omeClient)\n        {\n            audioSourceContainer = new GameObject(nameof(audioSourceContainer)).transform;\n            Object.DontDestroyOnLoad(audioSourceContainer);\n\n            omeClient.AddPublishPcCreateHook(CreatePublishPc);\n            omeClient.AddSubscribePcCreateHook(CreateSubscribePc);\n            omeClient.AddPublishPcCloseHook(ClosePublishPc);\n            omeClient.AddSubscribePcCloseHook(CloseSubscribePc);\n        }\n\n        private void CreatePublishPc(string clientId, RTCPeerConnection pc)\n        {\n            inResource.inAudio = new GameObject("InAudio").AddComponent<AudioSource>();\n            inResource.inAudio.transform.SetParent(audioSourceContainer);\n\n            inResource.inTrack = new AudioStreamTrack(inResource.inAudio)\n            {\n                Loopback = false\n            };\n            inResource.inStream = new MediaStream();\n            pc.AddTrack(inResource.inTrack, inResource.inStream);\n        }\n\n        private void CreateSubscribePc(string clientId, RTCPeerConnection pc) =>\n            pc.OnTrack = (RTCTrackEvent e) =>\n                {\n                    if (Logger.IsDebug())\n                    {\n                        Logger.LogDebug($"OnTrack: Kind={e.Track.Kind}");\n                    }\n                };\n\n        private void ClosePublishPc(string clientId)\n        {\n            if (inResource.inAudio != null)\n            {\n                inResource.inAudio.Stop();\n                Object.Destroy(inResource.inAudio.gameObject);\n            }\n            if (inResource.inTrack != null)\n            {\n                inResource.inTrack.Dispose();\n            }\n            if (inResource.inStream != null)\n            {\n                inResource.inStream.GetTracks().ToList().ForEach(track => track.Stop());\n                inResource.inStream.Dispose();\n            }\n            inResource = (default, default, default);\n        }\n\n        private void CloseSubscribePc(string clientId)\n        {\n        }\n\n        protected override void DoReleaseManagedResources()\n        {\n            if (audioSourceContainer != null && audioSourceContainer.gameObject != null)\n            {\n                Object.Destroy(audioSourceContainer.gameObject);\n            }\n        }\n    }\n}\n')),(0,a.yg)("h3",{id:"add-application-specific-processing-to-webgl-javascript-sfu"},"Add application-specific processing to WebGL (JavaScript) SFU"),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Processing continues even if errors occur during Create/Close of PeerConnection.")),(0,a.yg)("p",null,"WebGL (JavaScript) is a bit more extensive than Native (C#) because it requires C# and JavaScript to work together.\nThe mechanism is the same as Native (C#), using hooks to add application-specific processing to SFU."),(0,a.yg)("p",null,"An example implementation of adding an audio stream is shown below.\nThe major difference is that OmeClient is obtained from OmeClientProvider function."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { OmeClientProvider } from "@extreal-dev/Extreal.Integration.SFU.OME";\n\nclass InResource {\n    public inStream: MediaStream | undefined;\n    public inTrack: MediaStreamTrack | undefined;\n}\n\nclass AudioStreamClient {\n    private readonly label: string = "sample";\n    private readonly isDebug: boolean;\n    private readonly getOmeClient: OmeClientProvider;\n\n    private inResource: InResource | undefined;\n\n    constructor(getOmeClient: OmeClientProvider) {\n        this.isDebug = true;\n        this.getOmeClient = getOmeClient;\n        this.getOmeClient().addPublishPcCreateHook(this.createPublishPc);\n        this.getOmeClient().addSubscribePcCreateHook(this.createSubscribePc);\n        this.getOmeClient().addPublishPcCloseHook(this.closePublishPc);\n        this.getOmeClient().addSubscribePcCloseHook(this.closeSubscribePc);\n    }\n\n    private createPublishPc = (clientId: string, pc: RTCPeerConnection) => {\n        this.inResource = new InResource();\n\n        const audioContext = new AudioContext();\n        const gainNode = audioContext.createGain();\n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n\n        const destination = audioContext.createMediaStreamDestination();\n        gainNode.connect(destination);\n\n        const inStream = destination.stream;\n        const inTrack = inStream.getAudioTracks()[0];\n        this.inResource.inStream = inStream;\n        this.inResource.inTrack = inTrack;\n\n        pc.addTrack(this.inResource.inTrack, this.inResource.inStream);\n    };\n\n    private createSubscribePc = (clientId: string, pc: RTCPeerConnection) => {\n        pc.addEventListener("track", (event) => {\n            if (this.isDebug) {\n                console.log(`OnTrack: Kind=${event.track.kind}`);\n            }\n        });\n    };\n\n    private closePublishPc = (clientId: string) => {\n        this.inResource = undefined;\n    };\n\n    private closeSubscribePc = (clientId: string) => {};\n}\n\nexport { AudioStreamClient };\n')),(0,a.yg)("p",null,"OmeClientProvider is provided by OmeAdapter, which appeared in ",(0,a.yg)("a",{parentName:"p",href:"#settings"},"Settings"),".\nOmeAdapter holds OmeClient internally and defines the interaction between C# and JavaScript."),(0,a.yg)("p",null,"To do SFU with WebGL, first create OmeAdapter and call adapt function.\nThen, use OmeAdapter's getOmeClient function to add application-specific processing like the AudioStreamClient described earlier."),(0,a.yg)("p",null,"The timing of calling application-specific processing is important here.\nBe careful not to initialize the processing added by the application (in this case, AudioStreamClient) before C#'s OmeClient.\nC#'s OmeClient is initialized at the timing when the Provide method of OmeClientProvider is called."),(0,a.yg)("p",null,"Use ",(0,a.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/web.common"},"Web.Common")," to control the timing of the call from C#."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { addAction } from "@extreal-dev/extreal.integration.web.common";\nimport { OmeAdapter } from "@extreal-dev/Extreal.Integration.SFU.OME";\nimport { AudioStreamClient } from "./AudioStreamClient";\nimport { DummyClient } from "./DummyClient";\n\n\nconst omeAdapter = new OmeAdapter();\nomeAdapter.adapt();\n\nlet audioStreamClient: AudioStreamClient;\naddAction("start", () => audioStreamClient = new AudioStreamClient(omeAdapter.getOmeClient));\naddAction("dummyhook", () => DummyClient.dummyHook(omeAdapter.getOmeClient));\n')),(0,a.yg)("p",null,"Create a C# caller.\nUse WebGLHelper in ",(0,a.yg)("a",{parentName:"p",href:"/Extreal.Guide/en/next/integration/web.common"},"Web.Common"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'using Extreal.Integration.Web.Common;\n\nnamespace Extreal.Integration.SFU.OME.MVS.ClientControl\n{\n    public class WebGLAudioStreamClient : AudioStreamClient\n    {\n        public WebGLAudioStreamClient() => WebGLHelper.CallAction("start");\n    }\n}\n')))}p.isMDXComponent=!0}}]);